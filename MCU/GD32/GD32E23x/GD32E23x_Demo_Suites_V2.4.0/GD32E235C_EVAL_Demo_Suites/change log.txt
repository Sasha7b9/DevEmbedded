/*!
    \file    change log.txt
    \brief   change log for GD32E23x firmware

    \version 2025-02-10, V2.4.0, demo for GD32E23x
*/

/*
    Copyright (c) 2025, GigaDevice Semiconductor Inc.

    Redistribution and use in source and binary forms, with or without modification, 
are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this 
       list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice, 
       this list of conditions and the following disclaimer in the documentation 
       and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its contributors 
       may be used to endorse or promote products derived from this software without 
       specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
OF SUCH DAMAGE.
*/

******************* V2.4.0 2025-02-10 ************************************************************************************
______________________Common______________________________________________________________________________________________
Fix file:
..\GD32E23x_Firmware_Library\*
fix reason:
Update the firmware library version to v2.3.0.
V2.3.0:
GD32E23x_Firmware_Library v2.2.0
V2.4.0:
GD32E23x_Firmware_Library v2.3.0

Fix file:
*\EWARM\Project.ewd
*\EWARM\Project.ewd
fix reason:
Update IAR project format(modify default .board/mac/ddf/icf linker path)

Fix file:
.\Utilities\gd32e235c_eval.c
fix reason:
Modified type compatible nvic_irq_enable() function entry.
V2.3.0:
static const uint8_t KEY_IRQn[KEYn]
V2.4.0:
static const IRQn_Type KEY_IRQn[KEYn]

******************* V2.3.0 2024-07-30 ************************************************************************************
______________________Common______________________________________________________________________________________________
Fix file:
..\GD32E23x_Firmware_Library\*
fix reason:
Update the firmware library version to v2.2.0.
V2.2.0:
GD32E23x_Firmware_Library v2.1.0
V2.3.0:
GD32E23x_Firmware_Library v2.2.0
______________________USART______________________________________________________________________________________________
Fix file:
./Projects/04_USART_Printf/main.c
./Projects/05_USART_HyperTerminal_Interrupt/main.c
./Projects/06_USART_DMA/main.c
fix reason:
Add support for printf in GCC.
V2.2.0:
/* retarget the C library printf function to the USART */
int fputc(int ch, FILE *f)
{
    usart_data_transmit(USART0, (uint8_t) ch);
    while(RESET == usart_flag_get(USART0, USART_FLAG_TBE));
    return ch;
}
V2.3.0:
#ifdef GD_ECLIPSE_GCC
/* retarget the C library printf function to the usart, in Eclipse GCC environment */
int __io_putchar(int ch)
{
    usart_data_transmit(USART0, (uint8_t)ch);
    while(RESET == usart_flag_get(USART0, USART_FLAG_TBE));
    return ch;
}
#else
/* retarget the C library printf function to the usart */
int fputc(int ch, FILE *f)
{
    usart_data_transmit(USART0, (uint8_t)ch);
    while(RESET == usart_flag_get(USART0, USART_FLAG_TBE));
    return ch;
}
#endif /* GD_ECLIPSE_GCC */

Fix file:
./Projects/09_I2C_EEPROM/main.c
./Projects/10_SPI_Quad_Flash/main.c
./Projects/13_RCU_Clock_Out/main.c
fix reason:
Add support for printf in GCC.
V2.2.0:
/* retarget the C library printf function to the USART */
int fputc(int ch, FILE *f)
{
    usart_data_transmit(EVAL_COM, (uint8_t) ch);
    while(RESET == usart_flag_get(EVAL_COM, USART_FLAG_TBE));
    return ch;
}
V2.3.0:
#ifdef GD_ECLIPSE_GCC
/* retarget the C library printf function to the usart, in Eclipse GCC environment */
int __io_putchar(int ch)
{
    usart_data_transmit(EVAL_COM, (uint8_t)ch);
    while(RESET == usart_flag_get(EVAL_COM, USART_FLAG_TBE));
    return ch;
}
#else
/* retarget the C library printf function to the usart */
int fputc(int ch, FILE *f)
{
    usart_data_transmit(EVAL_COM, (uint8_t)ch);
    while(RESET == usart_flag_get(EVAL_COM, USART_FLAG_TBE));
    return ch;
}
#endif /* GD_ECLIPSE_GCC */
